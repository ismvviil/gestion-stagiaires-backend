# app/services/evaluation_service.py
import uuid
import qrcode
from io import BytesIO
import base64
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
from sqlalchemy.orm import Session
from sqlalchemy import func, and_

from app.models.evaluation import (
    CritereEvaluation, Evaluation, DetailEvaluation, 
    Certificat, StatutEvaluation, StatutCertificat
)

from app.models.stage import Stage
from app.models.candidature import Candidature
from app.models.utilisateur import Utilisateur
from app.models.entreprise import Entreprise
from app.schemas.evaluation import (
    EvaluationCreate, CertificatGeneration, StatistiquesEvaluation
)
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import joinedload
from typing import Dict, Any, Optional

# class CodeUniqueService:
#     """Service pour g√©n√©rer des codes uniques."""
    
#     @staticmethod
#     def generer_code_certificat(db: Session, annee: int = None) -> str:
#         """G√©n√®re un code unique pour un certificat."""
#         if annee is None:
#             annee = datetime.now().year
        
#         while True:
#             # Format: CERT-YYYY-XXXXXXXX (8 caract√®res al√©atoires)
#             code_aleatoire = str(uuid.uuid4()).replace('-', '').upper()[:8]
#             code_unique = f"CERT-{annee}-{code_aleatoire}"
            
#             # V√©rifier l'unicit√©
#             existe = db.query(Certificat).filter(
#                 Certificat.code_unique == code_unique
#             ).first()
            
#             if not existe:
#                 return code_unique
            
# class QRCodeService:
#     """Service pour g√©n√©rer des QR codes."""
    
#     @staticmethod
#     def generer_qr_code(
#         code_unique: str, 
#         base_url: str = "http://localhost:8000"
#     ) -> str:
#         """G√©n√®re un QR code pour un certificat et retourne les donn√©es base64."""
        
#         # URL de v√©rification
#         verification_url = f"{base_url}/api/certificats/verify/{code_unique}"
        
#         # Cr√©er le QR code
#         qr = qrcode.QRCode(
#             version=1,
#             error_correction=qrcode.constants.ERROR_CORRECT_L,
#             box_size=10,
#             border=4,
#         )
#         qr.add_data(verification_url)
#         qr.make(fit=True)
        
#         # Cr√©er l'image
#         img = qr.make_image(fill_color="black", back_color="white")
        
#         # Convertir en base64
#         buffer = BytesIO()
#         img.save(buffer, format='PNG')
#         buffer.seek(0)
        
#         # Encoder en base64
#         qr_base64 = base64.b64encode(buffer.getvalue()).decode()
        
#         return qr_base64
    
#     @staticmethod
#     def generer_qr_code_donnees(donnees: Dict[str, Any]) -> str:
#         """G√©n√®re un QR code avec des donn√©es personnalis√©es."""
#         import json
        
#         qr = qrcode.QRCode(
#             version=1,
#             error_correction=qrcode.constants.ERROR_CORRECT_M,
#             box_size=10,
#             border=4,
#         )
        
#         # Convertir les donn√©es en JSON
#         qr.add_data(json.dumps(donnees))
#         qr.make(fit=True)
        
#         img = qr.make_image(fill_color="black", back_color="white")
        
#         buffer = BytesIO()
#         img.save(buffer, format='PNG')
#         buffer.seek(0)
        
#         return base64.b64encode(buffer.getvalue()).decode()
    

# class EvaluationService:
#     """Service pour g√©rer les √©valuations."""
    
#     @staticmethod
#     def creer_evaluation(
#         db: Session, 
#         evaluation_data: EvaluationCreate, 
#         evaluateur_id: int
#     ) -> Evaluation:
#         """Cr√©e une nouvelle √©valuation."""
        
#         # V√©rifier que le stage existe et est termin√©
#         stage = db.query(Stage).filter(Stage.id == evaluation_data.stage_id).first()
#         if not stage:
#             raise ValueError("Stage non trouv√©")
        
#         if stage.status.value != "termine":
#             raise ValueError("Le stage doit √™tre termin√© pour √™tre √©valu√©")
        
#         # V√©rifier qu'il n'y a pas d√©j√† d'√©valuation
#         evaluation_existante = db.query(Evaluation).filter(
#             Evaluation.stage_id == evaluation_data.stage_id
#         ).first()
#         if evaluation_existante:
#             raise ValueError("Ce stage a d√©j√† √©t√© √©valu√©")
        
#         # Cr√©er l'√©valuation
#         evaluation = Evaluation(
#             **evaluation_data.dict(exclude={'details'}),
#             evaluateur_id=evaluateur_id,
#             statut=StatutEvaluation.BROUILLON
#         )
#         db.add(evaluation)
#         db.flush()  # Pour obtenir l'ID
        
#         # Ajouter les d√©tails
#         for detail_data in evaluation_data.details:
#             detail = DetailEvaluation(
#                 **detail_data.dict(),
#                 evaluation_id=evaluation.id
#             )
#             db.add(detail)
        
#         # üîß FIX CRITIQUE : Flush pour charger les relations
#         db.flush()
        
#         # üîß FIX CRITIQUE : Rafra√Æchir l'objet pour charger les relations
#         db.refresh(evaluation)
        
#         # üîß FIX CRITIQUE : Calculer la note globale
#         note_calculee = EvaluationService._calculer_note_globale_service(db, evaluation.id)
#         evaluation.note_globale = note_calculee
        
#         db.commit()
#         db.refresh(evaluation)
#         return evaluation
    
#     @staticmethod
#     def valider_evaluation(db: Session, evaluation_id: int) -> Evaluation:
#         """Valide une √©valuation."""
#         evaluation = db.query(Evaluation).filter(
#             Evaluation.id == evaluation_id
#         ).first()
        
#         if not evaluation:
#             raise ValueError("√âvaluation non trouv√©e")
        
#         if evaluation.statut == StatutEvaluation.VALIDEE:
#             raise ValueError("√âvaluation d√©j√† valid√©e")
        
#         evaluation.valider_evaluation()
#         db.commit()
#         db.refresh(evaluation)
#         return evaluation
    
#     @staticmethod
#     def obtenir_criteres_evaluation(
#         db: Session, 
#         entreprise_id: Optional[int] = None
#     ) -> List[CritereEvaluation]:
#         """Obtient les crit√®res d'√©valuation disponibles."""
#         query = db.query(CritereEvaluation).filter(
#             CritereEvaluation.actif == True
#         )
        
#         # Crit√®res globaux + crit√®res de l'entreprise
#         if entreprise_id:
#             query = query.filter(
#                 (CritereEvaluation.est_global == True) |
#                 (CritereEvaluation.entreprise_id == entreprise_id)
#             )
#         else:
#             query = query.filter(CritereEvaluation.est_global == True)
        
#         return query.all()
    
#     @staticmethod
#     def calculer_statistiques_evaluation(
#         db: Session, 
#         entreprise_id: Optional[int] = None
#     ) -> StatistiquesEvaluation:
#         """Calcule les statistiques d'√©valuation."""
#         query = db.query(Evaluation)
        
#         if entreprise_id:
#             query = query.join(Stage).filter(Stage.entreprise_id == entreprise_id)
        
#         evaluations = query.all()
        
#         nombre_total = len(evaluations)
#         nombre_validees = len([e for e in evaluations if e.statut == StatutEvaluation.VALIDEE])
        
#         # Note moyenne
#         notes = [e.note_globale for e in evaluations if e.note_globale is not None]
#         note_moyenne = sum(notes) / len(notes) if notes else None
        
#         # R√©partition des mentions
#         mentions = {}
#         for evaluation in evaluations:
#             if evaluation.note_globale:
#                 mention = CertificatService.calculer_mention(evaluation.note_globale)
#                 mentions[mention] = mentions.get(mention, 0) + 1
        
#         # Taux de recommandation d'embauche
#         recommandations = [e for e in evaluations if e.recommande_embauche is not None]
#         taux_recommandation = None
#         if recommandations:
#             nombre_recommandations = len([e for e in recommandations if e.recommande_embauche])
#             taux_recommandation = (nombre_recommandations / len(recommandations)) * 100
        
#         return StatistiquesEvaluation(
#             nombre_evaluations_total=nombre_total,
#             nombre_evaluations_validees=nombre_validees,
#             note_moyenne=note_moyenne,
#             repartition_mentions=mentions,
#             taux_recommandation_embauche=taux_recommandation
#         )
    
# class CertificatService:
#     """Service pour g√©rer les certificats."""
    
#     @staticmethod
#     def generer_certificat(
#         db: Session, 
#         evaluation_id: int, 
#         generateur_id: int,
#         base_url: str = "http://localhost:8000"
#     ) -> Certificat:
#         """G√©n√®re un certificat √† partir d'une √©valuation."""
        
#          # R√©cup√©rer l'√©valuation avec toutes les relations
#         evaluation = db.query(Evaluation).filter(
#             Evaluation.id == evaluation_id
#         ).first()
        
#         if not evaluation:
#             raise ValueError("√âvaluation non trouv√©e")
        
#         if evaluation.statut != StatutEvaluation.VALIDEE:
#             raise ValueError("L'√©valuation doit √™tre valid√©e pour g√©n√©rer un certificat")
        
#         # V√©rifier qu'il n'y a pas d√©j√† de certificat
#         certificat_existant = db.query(Certificat).filter(
#             Certificat.evaluation_id == evaluation_id
#         ).first()
#         if certificat_existant:
#             raise ValueError("Un certificat a d√©j√† √©t√© g√©n√©r√© pour cette √©valuation")
        
#         # R√©cup√©rer les donn√©es n√©cessaires
#         stage = evaluation.stage
#         candidature = stage.candidature
#         stagiaire = candidature.stagiaire
#         entreprise = stage.entreprise
#         generateur = db.query(Utilisateur).filter(Utilisateur.id == generateur_id).first()
        
#         # Calculer la dur√©e du stage
#         duree_jours = (stage.date_fin - stage.date_debut).days
        
#         # G√©n√©rer le code unique
#         code_unique = CodeUniqueService.generer_code_certificat(db)
        
#         # G√©n√©rer le QR code
#         qr_code_data = QRCodeService.generer_qr_code(code_unique, base_url)
        
#         # Cr√©er le certificat
#         certificat = Certificat(
#             code_unique=code_unique,
#             titre_stage=candidature.offre.titre,
#             date_debut_stage=stage.date_debut,
#             date_fin_stage=stage.date_fin,
#             duree_stage_jours=duree_jours,
#             note_finale=evaluation.note_globale,
#             mention=CertificatService.calculer_mention(evaluation.note_globale),
#             nom_stagiaire=stagiaire.nom,
#             prenom_stagiaire=stagiaire.prenom,
#             nom_entreprise=entreprise.raison_social,
#             secteur_entreprise=entreprise.secteur_activite,
#             nom_evaluateur=generateur.nom,
#             prenom_evaluateur=generateur.prenom,
#             poste_evaluateur=getattr(generateur, 'poste', '√âvaluateur'),
#             qr_code_data=qr_code_data,
#             evaluation_id=evaluation_id,
#             candidature_id=candidature.id,
#             stage_id=stage.id,
#             entreprise_id=entreprise.id,
#             generateur_id=generateur_id,
#             statut=StatutCertificat.GENERE
#         )
        
#         db.add(certificat)
#         db.commit()
#         db.refresh(certificat)
#         return certificat
    
#     @staticmethod
#     def calculer_mention(note: float) -> str:
#         """Calcule la mention bas√©e sur la note."""
#         if note >= 9:
#             return "Excellent"
#         elif note >= 8:
#             return "Tr√®s Bien"
#         elif note >= 7:
#             return "Bien"
#         elif note >= 6:
#             return "Assez Bien"
#         elif note >= 5:
#             return "Passable"
#         else:
#             return "Insuffisant"
    
#     @staticmethod
#     def verifier_certificat(db: Session, code_unique: str) -> Optional[Certificat]:
#         """V√©rifie l'authenticit√© d'un certificat."""
#         certificat = db.query(Certificat).filter(
#             Certificat.code_unique == code_unique
#         ).first()
        
#         if certificat:
#             # Incr√©menter le compteur de v√©rifications
#             certificat.incrementer_verifications()
#             db.commit()
        
#         return certificat
    
#     @staticmethod
#     def marquer_comme_telecharge(db: Session, certificat_id: int):
#         """Marque un certificat comme t√©l√©charg√©."""
#         certificat = db.query(Certificat).filter(Certificat.id == certificat_id).first()
#         if certificat:
#             certificat.statut = StatutCertificat.TELECHARGE
#             certificat.date_dernier_telechargement = func.now()
#             db.commit()

# class VerificationService:
#     """Service pour la v√©rification des certificats."""
    
#     @staticmethod
#     def verifier_par_qr_code(db: Session, code_unique: str) -> Dict[str, Any]:
#         """V√©rifie un certificat via son code QR."""
#         certificat = CertificatService.verifier_certificat(db, code_unique)
        
#         if not certificat:
#             return {
#                 "valide": False,
#                 "message": "Certificat non trouv√© ou invalide",
#                 "certificat": None
#             }
        
#         # V√©rifications suppl√©mentaires
#         if certificat.statut == StatutCertificat.GENERE:
#             statut_message = "Certificat valide"
#         elif certificat.statut == StatutCertificat.TELECHARGE:
#             statut_message = "Certificat valide et t√©l√©charg√©"
#         else:
#             statut_message = "Certificat valide"
        
#         return {
#             "valide": True,
#             "message": statut_message,
#             "certificat": certificat,
#             "verification_numero": certificat.nombre_verifications
#         }
    
#     @staticmethod
#     def obtenir_historique_verifications(
#         db: Session, 
#         certificat_id: int
#     ) -> Dict[str, Any]:
#         """Obtient l'historique des v√©rifications d'un certificat."""
#         certificat = db.query(Certificat).filter(Certificat.id == certificat_id).first()
        
#         if not certificat:
#             return {"erreur": "Certificat non trouv√©"}
        
#         return {
#             "code_unique": certificat.code_unique,
#             "nombre_verifications": certificat.nombre_verifications,
#             "date_generation": certificat.date_generation,
#             "date_dernier_telechargement": certificat.date_dernier_telechargement,
#             "statut": certificat.statut.value
#         }


# app/services/evaluation_service.py - VERSION COMPL√àTE CORRIG√âE

from sqlalchemy.orm import Session
from sqlalchemy.sql import func
from typing import List, Optional, Dict, Any
from datetime import datetime
import uuid
import base64
import qrcode
from io import BytesIO

from app.models.evaluation import *
from app.models.stage import Stage
from app.models.utilisateur import Utilisateur
from app.schemas.evaluation import EvaluationCreate, StatistiquesEvaluation

class CodeUniqueService:
    """Service pour g√©n√©rer des codes uniques."""
    
    @staticmethod
    def generer_code_certificat(db: Session, annee: int = None) -> str:
        """G√©n√®re un code unique pour un certificat."""
        if annee is None:
            annee = datetime.now().year
        
        while True:
            code_aleatoire = str(uuid.uuid4()).replace('-', '').upper()[:8]
            code_unique = f"CERT-{annee}-{code_aleatoire}"
            
            existe = db.query(Certificat).filter(
                Certificat.code_unique == code_unique
            ).first()
            
            if not existe:
                return code_unique

class QRCodeService:
    """Service pour g√©n√©rer des QR codes."""
    
    @staticmethod
    def generer_qr_code(
        code_unique: str, 
        base_url: str = "http://localhost:8000"
    ) -> str:
        """G√©n√®re un QR code pour un certificat et retourne les donn√©es base64."""
        
        verification_url = f"{base_url}/api/evaluations/certificats/verify/{code_unique}"
        
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(verification_url)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        
        buffer = BytesIO()
        img.save(buffer, format='PNG')
        buffer.seek(0)
        
        qr_base64 = base64.b64encode(buffer.getvalue()).decode()
        return qr_base64

class EvaluationService:
    """Service pour g√©rer les √©valuations."""
    
    @staticmethod
    def creer_evaluation(
        db: Session, 
        evaluation_data: EvaluationCreate, 
        evaluateur_id: int
    ) -> Evaluation:
        """Cr√©e une nouvelle √©valuation avec calcul automatique de la note."""
        
        # V√©rifier que le stage existe
        stage = db.query(Stage).filter(Stage.id == evaluation_data.stage_id).first()
        if not stage:
            raise ValueError("Stage non trouv√©")
        
        if stage.status != "termine":
            raise ValueError("Le stage doit √™tre termin√© pour √™tre √©valu√©")
    
        # V√©rifier qu'il n'y a pas d√©j√† d'√©valuation
        evaluation_existante = db.query(Evaluation).filter(
            Evaluation.stage_id == evaluation_data.stage_id
        ).first()
        if evaluation_existante:
            # raise ValueError("Ce stage a d√©j√† √©t√© √©valu√©")
            raise ValueError(f"Ce stage a d√©j√† √©t√© √©valu√© (√âvaluation #{evaluation_existante.id})")
        
        # Cr√©er l'√©valuation principale
        evaluation = Evaluation(
            stage_id=evaluation_data.stage_id,
            evaluateur_id=evaluateur_id,
            commentaire_general=evaluation_data.commentaire_general,
            points_forts=evaluation_data.points_forts,
            points_amelioration=evaluation_data.points_amelioration,
            recommandations=evaluation_data.recommandations,
            recommande_embauche=evaluation_data.recommande_embauche,
            statut=StatutEvaluation.BROUILLON
        )
        
        db.add(evaluation)
        db.flush()  # Pour obtenir l'ID
        
        # Ajouter les d√©tails d'√©valuation
        for detail_data in evaluation_data.details:
            detail = DetailEvaluation(
                evaluation_id=evaluation.id,
                critere_id=detail_data.critere_id,
                note=detail_data.note,
                commentaire=detail_data.commentaire
            )
            db.add(detail)
        
        # üîß SOLUTION : Calculer imm√©diatement la note globale
        db.flush()  # S'assurer que les d√©tails sont en base
        
        # üéØ CALCUL DIRECT DE LA NOTE GLOBALE
        note_globale = EvaluationService._calculer_note_globale_service(db, evaluation.id)
        evaluation.note_globale = note_globale
        
        print(f"üî¢ Note globale calcul√©e: {note_globale}")
        
        db.commit()
        db.refresh(evaluation)
        return evaluation
    
    @staticmethod
    def _calculer_note_globale_service(db: Session, evaluation_id: int) -> Optional[float]:
        """üéØ M√âTHODE MANQUANTE : Calcule la note globale d'une √©valuation."""
        
        # R√©cup√©rer tous les d√©tails avec leurs crit√®res
        details = db.query(DetailEvaluation).join(CritereEvaluation).filter(
            DetailEvaluation.evaluation_id == evaluation_id,
            CritereEvaluation.actif == True
        ).all()
        
        if not details:
            print("‚ùå Aucun d√©tail trouv√© pour l'√©valuation")
            return None
        
        print(f"üìä Calcul pour {len(details)} crit√®res:")
        
        total_poids = 0
        note_ponderee = 0
        
        for detail in details:
            poids = detail.critere.poids
            note = detail.note
            contribution = note * poids
            
            total_poids += poids
            note_ponderee += contribution
            
            print(f"  - {detail.critere.nom}: note={note}, poids={poids}, contribution={contribution}")
        
        if total_poids == 0:
            print("‚ùå Total des poids = 0")
            return None
        
        note_finale = round(note_ponderee / total_poids, 2)
        print(f"üéØ R√©sultat: {note_ponderee} √∑ {total_poids} = {note_finale}")
        
        return note_finale
    
    @staticmethod
    def finaliser_evaluation(db: Session, evaluation_id: int) -> Evaluation:
        """Finalise une √©valuation (BROUILLON ‚Üí TERMINEE)."""
        
        evaluation = db.query(Evaluation).filter(Evaluation.id == evaluation_id).first()
        if not evaluation:
            raise ValueError("√âvaluation non trouv√©e")
        
        if evaluation.statut != StatutEvaluation.BROUILLON:
            raise ValueError("Seules les √©valuations en brouillon peuvent √™tre finalis√©es")
        
        # Recalculer la note si n√©cessaire
        if evaluation.note_globale is None:
            note_calculee = EvaluationService._calculer_note_globale_service(db, evaluation_id)
            evaluation.note_globale = note_calculee
        
        if not evaluation.details or evaluation.note_globale is None:
            raise ValueError("L'√©valuation doit √™tre compl√®te avant finalisation")
        
        evaluation.statut = StatutEvaluation.TERMINEE
        
        db.commit()
        db.refresh(evaluation)
        return evaluation
    
    @staticmethod
    def valider_evaluation(db: Session, evaluation_id: int) -> Evaluation:
        """Valide une √©valuation (TERMINEE ‚Üí VALIDEE)."""
        
        evaluation = db.query(Evaluation).filter(Evaluation.id == evaluation_id).first()
        if not evaluation:
            raise ValueError("√âvaluation non trouv√©e")
        
        if evaluation.statut != StatutEvaluation.TERMINEE:
            raise ValueError("Seules les √©valuations termin√©es peuvent √™tre valid√©es")
        
        evaluation.statut = StatutEvaluation.VALIDEE
        evaluation.date_validation = func.now()
        
        db.commit()
        db.refresh(evaluation)
        return evaluation
    
    @staticmethod
    def obtenir_criteres_evaluation(
        db: Session, 
        entreprise_id: Optional[int] = None
    ) -> List[CritereEvaluation]:
        """Obtient les crit√®res d'√©valuation disponibles."""
        
        query = db.query(CritereEvaluation).filter(CritereEvaluation.actif == True)
        
        if entreprise_id:
            query = query.filter(
                (CritereEvaluation.est_global == True) |
                (CritereEvaluation.entreprise_id == entreprise_id)
            )
        else:
            query = query.filter(CritereEvaluation.est_global == True)
        
        return query.all()
    

    @staticmethod
    def calculer_statistiques_recruteur(db: Session, recruteur_id: int) -> StatistiquesEvaluation:
        """Calculer les statistiques d'√©valuation pour un recruteur sp√©cifique."""
        
        # üîß R√©cup√©rer toutes les √©valuations du recruteur
        evaluations = db.query(Evaluation)\
            .join(Stage)\
            .filter(Stage.recruteur_id == recruteur_id)\
            .all()
        
        if not evaluations:
            return StatistiquesEvaluation(
                nombre_evaluations_total=0,
                nombre_evaluations_validees=0,
                note_moyenne=None,
                repartition_mentions={},
                taux_recommandation_embauche=None
            )
        
        # Calculer les statistiques
        nombre_total = len(evaluations)
        
        # √âvaluations valid√©es
        evaluations_validees = [e for e in evaluations if e.statut == StatutEvaluation.VALIDEE]
        nombre_validees = len(evaluations_validees)
        
        # Note moyenne
        notes = [e.note_globale for e in evaluations if e.note_globale is not None]
        note_moyenne = sum(notes) / len(notes) if notes else None
        
        # R√©partition des mentions
        def calculer_mention(note):
            if note >= 9:
                return "Excellent"
            elif note >= 8:
                return "Tr√®s Bien"
            elif note >= 7:
                return "Bien"
            elif note >= 6:
                return "Assez Bien"
            elif note >= 5:
                return "Passable"
            else:
                return "Insuffisant"
        
        repartition_mentions = {}
        for note in notes:
            mention = calculer_mention(note)
            repartition_mentions[mention] = repartition_mentions.get(mention, 0) + 1
        
        # Taux de recommandation d'embauche
        evaluations_avec_recommandation = [
            e for e in evaluations 
            if e.recommande_embauche is not None
        ]
        
        if evaluations_avec_recommandation:
            recommandations_positives = [
                e for e in evaluations_avec_recommandation 
                if e.recommande_embauche is True
            ]
            taux_recommandation = (len(recommandations_positives) / len(evaluations_avec_recommandation)) * 100
        else:
            taux_recommandation = None
        
        return StatistiquesEvaluation(
            nombre_evaluations_total=nombre_total,
            nombre_evaluations_validees=nombre_validees,
            note_moyenne=round(note_moyenne, 2) if note_moyenne else None,
            repartition_mentions=repartition_mentions,
            taux_recommandation_embauche=round(taux_recommandation, 1) if taux_recommandation else None
        )
    
    @staticmethod
    def calculer_statistiques_evaluation(
        db: Session, 
        entreprise_id: Optional[int] = None
    ) -> StatistiquesEvaluation:
        """Calcule les statistiques d'√©valuation."""
        
        query = db.query(Evaluation)
        if entreprise_id:
            query = query.join(Stage).filter(Stage.entreprise_id == entreprise_id)
        
        evaluations = query.all()
        
        nombre_total = len(evaluations)
        nombre_validees = len([e for e in evaluations if e.statut == StatutEvaluation.VALIDEE])
        
        # Note moyenne
        notes = [e.note_globale for e in evaluations if e.note_globale is not None]
        note_moyenne = round(sum(notes) / len(notes), 2) if notes else None
        
        # R√©partition des mentions
        mentions = {}
        for evaluation in evaluations:
            if evaluation.note_globale:
                mention = CertificatService.calculer_mention(evaluation.note_globale)
                mentions[mention] = mentions.get(mention, 0) + 1
        
        # Taux de recommandation
        recommandations = [e for e in evaluations if e.recommande_embauche is not None]
        taux_recommandation = None
        if recommandations:
            nombre_recommandations = len([e for e in recommandations if e.recommande_embauche])
            taux_recommandation = round((nombre_recommandations / len(recommandations)) * 100, 2)
        
        return StatistiquesEvaluation(
            nombre_evaluations_total=nombre_total,
            nombre_evaluations_validees=nombre_validees,
            note_moyenne=note_moyenne,
            repartition_mentions=mentions,
            taux_recommandation_embauche=taux_recommandation
        )




class CertificatService:
    """Service pour g√©rer les certificats."""
    
    @staticmethod
    def generer_certificat(
        db: Session, 
        evaluation_id: int, 
        generateur_id: int,
        base_url: str = "http://localhost:8000"
    ) -> Dict[str, Any]:
        """G√©n√®re un certificat √† partir d'une √©valuation valid√©e."""
        
        # üîß Charger l'√©valuation avec toutes les relations n√©cessaires
        evaluation = db.query(Evaluation).options(
            joinedload(Evaluation.stage).joinedload(Stage.stagiaire),
            joinedload(Evaluation.stage).joinedload(Stage.entreprise),
            joinedload(Evaluation.stage).joinedload(Stage.candidature).joinedload(Candidature.offre),
            joinedload(Evaluation.evaluateur)
        ).filter(Evaluation.id == evaluation_id).first()
        
        if not evaluation:
            raise ValueError("√âvaluation non trouv√©e")
        
        if evaluation.statut != StatutEvaluation.VALIDEE:
            raise ValueError("L'√©valuation doit √™tre valid√©e pour g√©n√©rer un certificat")
        
        # üîß V√©rifier qu'il n'y a pas d√©j√† de certificat pour cette √©valuation
        certificat_existant = db.query(Certificat).filter(
            Certificat.evaluation_id == evaluation_id
        ).first()
        if certificat_existant:
            return {
                "success": True,
                "message": "Un certificat existe d√©j√† pour cette √©valuation",
                "certificat": certificat_existant,
                "code_unique": certificat_existant.code_unique,
                "deja_genere": True
            }
        
        # üîß V√©rifier s'il y a d√©j√† un certificat pour cette candidature
        stage = evaluation.stage
        if stage.candidature_id:
            certificat_candidature = db.query(Certificat).filter(
                Certificat.candidature_id == stage.candidature_id
            ).first()
            if certificat_candidature:
                return {
                    "success": True,
                    "message": f"Un certificat existe d√©j√† pour la candidature de {stage.stagiaire.prenom} {stage.stagiaire.nom}",
                    "certificat": certificat_candidature,
                    "code_unique": certificat_candidature.code_unique,
                    "deja_genere": True
                }
        
        # üîß R√©cup√©rer les donn√©es n√©cessaires avec v√©rifications
        if not stage:
            raise ValueError("Stage non trouv√© pour cette √©valuation")
        
        stagiaire = stage.stagiaire
        if not stagiaire:
            raise ValueError("Stagiaire non trouv√© pour ce stage")
        
        entreprise = stage.entreprise
        if not entreprise:
            raise ValueError("Entreprise non trouv√©e pour ce stage")
        
        evaluateur = evaluation.evaluateur
        if not evaluateur:
            raise ValueError("√âvaluateur non trouv√© pour cette √©valuation")
        
        # R√©cup√©rer le titre du stage
        titre_stage = "Stage"
        if stage.candidature and stage.candidature.offre:
            titre_stage = stage.candidature.offre.titre
        elif stage.description:
            titre_stage = stage.description
        
        # Calculer la dur√©e du stage
        duree_jours = (stage.date_fin - stage.date_debut).days
        if duree_jours <= 0:
            duree_jours = 1  # Minimum 1 jour
        
        try:
            # G√©n√©rer le code unique et QR code
            code_unique = CodeUniqueService.generer_code_certificat(db)
            qr_code_data = QRCodeService.generer_qr_code(code_unique, base_url)
            
            # üîß Cr√©er le certificat avec les vraies donn√©es
            certificat = Certificat(
                code_unique=code_unique,
                titre_stage=titre_stage,
                date_debut_stage=stage.date_debut,
                date_fin_stage=stage.date_fin,
                duree_stage_jours=duree_jours,
                note_finale=evaluation.note_globale,
                mention=CertificatService.calculer_mention(evaluation.note_globale),
                nom_stagiaire=stagiaire.nom,
                prenom_stagiaire=stagiaire.prenom,
                nom_entreprise=entreprise.raison_social,
                secteur_entreprise=entreprise.secteur_activite or "Non sp√©cifi√©",
                nom_evaluateur=evaluateur.nom,
                prenom_evaluateur=evaluateur.prenom,
                poste_evaluateur=evaluateur.poste or "√âvaluateur",
                qr_code_data=qr_code_data,
                evaluation_id=evaluation_id,
                candidature_id=stage.candidature_id,  # üîß VRAIE candidature_id
                stage_id=stage.id,
                entreprise_id=entreprise.id,  # üîß VRAIE entreprise_id
                generateur_id=generateur_id,
                statut=StatutCertificat.GENERE
            )
            
            db.add(certificat)
            db.commit()
            db.refresh(certificat)
            
            return {
                "success": True,
                "message": "Certificat g√©n√©r√© avec succ√®s",
                "certificat": certificat,
                "code_unique": certificat.code_unique,
                "deja_genere": False
            }
            
        except IntegrityError as e:
            # üîß Gestion des erreurs de contrainte unique
            db.rollback()
            
            error_msg = str(e)
            print(f"üîß Erreur IntegrityError: {error_msg}")
            
            if "certificat_candidature_id_key" in error_msg:
                # R√©cup√©rer le certificat existant
                certificat_existant = db.query(Certificat).filter(
                    Certificat.candidature_id == stage.candidature_id
                ).first()
                
                return {
                    "success": True,
                    "message": f"Un certificat existe d√©j√† pour la candidature de {stagiaire.prenom} {stagiaire.nom}",
                    "certificat": certificat_existant,
                    "code_unique": certificat_existant.code_unique if certificat_existant else None,
                    "deja_genere": True
                }
            elif "certificat_evaluation_id_key" in error_msg:
                certificat_existant = db.query(Certificat).filter(
                    Certificat.evaluation_id == evaluation_id
                ).first()
                
                return {
                    "success": True,
                    "message": "Un certificat existe d√©j√† pour cette √©valuation",
                    "certificat": certificat_existant,
                    "code_unique": certificat_existant.code_unique if certificat_existant else None,
                    "deja_genere": True
                }
            else:
                raise ValueError(f"Erreur lors de la cr√©ation du certificat: {str(e)}")
                
        except Exception as e:
            db.rollback()
            print(f"üîß Erreur g√©n√©rale: {str(e)}")
            raise ValueError(f"Erreur lors de la g√©n√©ration du certificat: {str(e)}")
    
    @staticmethod
    def calculer_mention(note: float) -> str:
        """Calcule la mention bas√©e sur la note."""
        if note >= 9:
            return "Excellent"
        elif note >= 8:
            return "Tr√®s Bien"
        elif note >= 7:
            return "Bien"
        elif note >= 6:
            return "Assez Bien"
        elif note >= 5:
            return "Passable"
        else:
            return "Insuffisant"
    
    @staticmethod
    def verifier_certificat(db: Session, code_unique: str) -> Optional[Certificat]:
        """V√©rifie l'authenticit√© d'un certificat."""
        certificat = db.query(Certificat).filter(
            Certificat.code_unique == code_unique
        ).first()
        
        if certificat:
            certificat.incrementer_verifications()
            db.commit()
        
        return certificat
    
    @staticmethod
    def marquer_comme_telecharge(db: Session, certificat_id: int):
        """Marque un certificat comme t√©l√©charg√©."""
        certificat = db.query(Certificat).filter(Certificat.id == certificat_id).first()
        if certificat:
            certificat.statut = StatutCertificat.TELECHARGE
            certificat.date_dernier_telechargement = func.now()
            db.commit()

class VerificationService:
    """Service pour la v√©rification des certificats."""
    
    @staticmethod
    def verifier_par_qr_code(db: Session, code_unique: str) -> Dict[str, Any]:
        """V√©rifie un certificat via son code QR."""
        certificat = CertificatService.verifier_certificat(db, code_unique)
        
        if not certificat:
            return {
                "valide": False,
                "message": "Certificat non trouv√© ou invalide",
                "certificat": None
            }
        
        return {
            "valide": True,
            "message": "Certificat valide",
            "certificat": certificat,
            "verification_numero": certificat.nombre_verifications
        }
    
    
    # class CertificatService:
#     """Service pour g√©rer les certificats."""
    
#     @staticmethod
#     def generer_certificat(
#         db: Session, 
#         evaluation_id: int, 
#         generateur_id: int,
#         base_url: str = "http://localhost:8000"
#     ) -> Certificat:
#         """G√©n√®re un certificat √† partir d'une √©valuation valid√©e."""
        
#         evaluation = db.query(Evaluation).filter(Evaluation.id == evaluation_id).first()
#         if not evaluation:
#             raise ValueError("√âvaluation non trouv√©e")
        
#         if evaluation.statut != StatutEvaluation.VALIDEE:
#             raise ValueError("L'√©valuation doit √™tre valid√©e pour g√©n√©rer un certificat")
        
#         # V√©rifier qu'il n'y a pas d√©j√† de certificat
#         certificat_existant = db.query(Certificat).filter(
#             Certificat.evaluation_id == evaluation_id
#         ).first()
#         if certificat_existant:
#             raise ValueError("Un certificat a d√©j√† √©t√© g√©n√©r√© pour cette √©valuation")
        
#         # R√©cup√©rer les donn√©es n√©cessaires
#         stage = evaluation.stage
#         generateur = db.query(Utilisateur).filter(Utilisateur.id == generateur_id).first()
        
#         # Calculer la dur√©e du stage
#         duree_jours = (stage.date_fin - stage.date_debut).days
        
#         # G√©n√©rer le code unique et QR code
#         code_unique = CodeUniqueService.generer_code_certificat(db)
#         qr_code_data = QRCodeService.generer_qr_code(code_unique, base_url)
        
#         # Cr√©er le certificat
#         certificat = Certificat(
#             code_unique=code_unique,
#             titre_stage=f"Stage {stage.description}",
#             date_debut_stage=stage.date_debut,
#             date_fin_stage=stage.date_fin,
#             duree_stage_jours=duree_jours,
#             note_finale=evaluation.note_globale,
#             mention=CertificatService.calculer_mention(evaluation.note_globale),
#             nom_stagiaire="Stagiaire",  # √Ä adapter selon tes relations
#             prenom_stagiaire="Test",
#             nom_entreprise="Entreprise Test",
#             secteur_entreprise="Informatique",
#             nom_evaluateur=generateur.nom if generateur else "√âvaluateur",
#             prenom_evaluateur=generateur.prenom if generateur else "Test",
#             poste_evaluateur="Responsable RH",
#             qr_code_data=qr_code_data,
#             evaluation_id=evaluation_id,
#             candidature_id=1,  # √Ä adapter
#             stage_id=stage.id,
#             entreprise_id=1,  # √Ä adapter
#             generateur_id=generateur_id,
#             statut=StatutCertificat.GENERE
#         )
        
#         db.add(certificat)
#         db.commit()
#         db.refresh(certificat)
#         return certificat
    
#     @staticmethod
#     def calculer_mention(note: float) -> str:
#         """Calcule la mention bas√©e sur la note."""
#         if note >= 9:
#             return "Excellent"
#         elif note >= 8:
#             return "Tr√®s Bien"
#         elif note >= 7:
#             return "Bien"
#         elif note >= 6:
#             return "Assez Bien"
#         elif note >= 5:
#             return "Passable"
#         else:
#             return "Insuffisant"
    
#     @staticmethod
#     def verifier_certificat(db: Session, code_unique: str) -> Optional[Certificat]:
#         """V√©rifie l'authenticit√© d'un certificat."""
#         certificat = db.query(Certificat).filter(
#             Certificat.code_unique == code_unique
#         ).first()
        
#         if certificat:
#             certificat.incrementer_verifications()
#             db.commit()
        
#         return certificat
    
#     @staticmethod
#     def marquer_comme_telecharge(db: Session, certificat_id: int):
#         """Marque un certificat comme t√©l√©charg√©."""
#         certificat = db.query(Certificat).filter(Certificat.id == certificat_id).first()
#         if certificat:
#             certificat.statut = StatutCertificat.TELECHARGE
#             certificat.date_dernier_telechargement = func.now()
#             db.commit()

# class VerificationService:
#     """Service pour la v√©rification des certificats."""
    
#     @staticmethod
#     def verifier_par_qr_code(db: Session, code_unique: str) -> Dict[str, Any]:
#         """V√©rifie un certificat via son code QR."""
#         certificat = CertificatService.verifier_certificat(db, code_unique)
        
#         if not certificat:
#             return {
#                 "valide": False,
#                 "message": "Certificat non trouv√© ou invalide",
#                 "certificat": None
#             }
        
#         return {
#             "valide": True,
#             "message": "Certificat valide",
#             "certificat": certificat,
#             "verification_numero": certificat.nombre_verifications
#         }
