from sqlalchemy import Column, Integer, String, Text, Float, Boolean, ForeignKey, DateTime, Enum as SQLEnum
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from app.models.base import BaseModel
import enum
import uuid
from datetime import datetime

class TypeCritere(enum.Enum):
    """Types de crit√®res d'√©valuation."""
    COMPETENCE_TECHNIQUE = "competence_technique"
    COMPORTEMENT = "comportement"
    COMMUNICATION = "communication"
    INITIATIVE = "initiative"
    PONCTUALITE = "ponctualite"
    TRAVAIL_EQUIPE = "travail_equipe"
    ADAPTATION = "adaptation"
    AUTRE = "autre"

class CritereEvaluation(BaseModel):
    """Mod√®le pour les crit√®res d'√©valuation."""
    
    nom = Column(String, nullable=False)
    description = Column(Text, nullable=True)
    # type_critere = Column(String, nullable=False)
    type_critere = Column(
        SQLEnum(
            TypeCritere,
            name='typecritere',           # Nom exact en PostgreSQL
            create_constraint=False,      # Ne pas cr√©er, utiliser l'existant
            validate_strings=True,       # Valider les cha√Ænes
            values_callable=lambda x: [e.value for e in x]  # Utiliser les valeurs enum
        ),
        nullable=False
    )
    poids = Column(Float, default=1.0)  # Coefficient pour la note finale
    actif = Column(Boolean, default=True)
    
    # Qui a cr√©√© ce crit√®re (entreprise sp√©cifique ou syst√®me)
    entreprise_id = Column(Integer, ForeignKey("entreprise.id"), nullable=True)
    est_global = Column(Boolean, default=False)  # True = crit√®re syst√®me, False = crit√®re entreprise
    
    # Relations
    entreprise = relationship("Entreprise", back_populates="criteres_evaluation")
    details_evaluations = relationship("DetailEvaluation", back_populates="critere")

class StatutEvaluation(enum.Enum):
    """Statuts d'une √©valuation."""
    BROUILLON = "brouillon"
    TERMINEE = "terminee"
    VALIDEE = "validee"

class Evaluation(BaseModel):
    """Mod√®le pour les √©valuations de stage."""
    # Informations g√©n√©rales
    # statut = Column(SQLEnum(StatutEvaluation), default=StatutEvaluation.BROUILLON)
    statut = Column(
        SQLEnum(
            StatutEvaluation,
            name='statutevaluation',
            create_constraint=True,
            validate_strings=True
        ),
        default=StatutEvaluation.BROUILLON
    )
    note_globale = Column(Float, nullable=True)  # Note calcul√©e automatiquement
    commentaire_general = Column(Text, nullable=True)

    # Recommandations
    points_forts = Column(Text, nullable=True)
    points_amelioration = Column(Text, nullable=True)
    recommandations = Column(Text, nullable=True)

    # Embauche potentielle
    recommande_embauche = Column(Boolean, nullable=True)

    # Dates
    date_evaluation = Column(DateTime(timezone=True), server_default=func.now())
    date_validation = Column(DateTime(timezone=True), nullable=True)
    
    # Cl√©s √©trang√®res
    stage_id = Column(Integer, ForeignKey("stage.id"), nullable=False, unique=True)
    evaluateur_id = Column(Integer, ForeignKey("utilisateur.id"), nullable=False)

    # Relations
    stage = relationship("Stage", back_populates="evaluation")
    evaluateur = relationship("Utilisateur")  # RH ou Recruteur
    details = relationship("DetailEvaluation", back_populates="evaluation", cascade="all, delete-orphan")
    certificat = relationship("Certificat", back_populates="evaluation", uselist=False)

    # def calculer_note_globale(self):
    #     """Calcule la note globale bas√©e sur les d√©tails d'√©valuation."""
    #     if not self.details:
    #         return None
        
    #     total_poids = sum(detail.critere.poids for detail in self.details)
    #     if total_poids == 0:
    #         return None
        
    #     note_ponderee = sum(detail.note * detail.critere.poids for detail in self.details)
    #     self.note_globale = round(note_ponderee / total_poids, 2)
    #     return self.note_globale

    def calculer_note_globale(self):
        """Calcule la note globale bas√©e sur les d√©tails d'√©valuation."""
        if not self.details:
            return None
    
        # üîß FIX : Filtrer les crit√®res actifs
        details_actifs = [d for d in self.details if d.critere and d.critere.actif]
        if not details_actifs:
            return None
    
        total_poids = sum(detail.critere.poids for detail in details_actifs)
        if total_poids == 0:
            return None
    
        note_ponderee = sum(detail.note * detail.critere.poids for detail in details_actifs)
        self.note_globale = round(note_ponderee / total_poids, 2)
        return self.note_globale
    
    def valider_evaluation(self):
        """Valider l'√©valuation."""
        self.statut = StatutEvaluation.VALIDEE
        self.date_validation = func.now()

class DetailEvaluation(BaseModel):
    """Mod√®le pour le d√©tail d'une √©valuation par crit√®re."""
    
    note = Column(Integer, nullable=False)  # Note de 1 √† 10
    commentaire = Column(Text, nullable=True)

     # Cl√©s √©trang√®res
    evaluation_id = Column(Integer, ForeignKey("evaluation.id"), nullable=False)
    critere_id = Column(Integer, ForeignKey("critereevaluation.id"), nullable=False)

    # Relations
    evaluation = relationship("Evaluation", back_populates="details")
    critere = relationship("CritereEvaluation", back_populates="details_evaluations")

    # Contrainte unique
    __table_args__ = (
        {'schema': None},  # Peut √™tre ajust√© selon votre configuration
    )

class StatutCertificat(enum.Enum):
    """Statuts d'un certificat."""
    GENERE = "genere"
    TELECHARGE = "telecharge"
    VERIFIE = "verifie"

class Certificat(BaseModel):
    """Mod√®le pour les certificats de stage."""
    
    # Code unique pour v√©rification
    code_unique = Column(String, unique=True, nullable=False, index=True)

    # Informations du certificat
    titre_stage = Column(String, nullable=False)
    date_debut_stage = Column(DateTime(timezone=True), nullable=False)
    date_fin_stage = Column(DateTime(timezone=True), nullable=False)
    duree_stage_jours = Column(Integer, nullable=False)

    # R√©sultats
    note_finale = Column(Float, nullable=False)
    mention = Column(String, nullable=True)  # Excellent, Tr√®s bien, Bien, etc.
    
    # Informations stagiaire (d√©normalis√©es pour historique)
    nom_stagiaire = Column(String, nullable=False)
    prenom_stagiaire = Column(String, nullable=False)

    # Informations entreprise (d√©normalis√©es pour historique)
    nom_entreprise = Column(String, nullable=False)
    secteur_entreprise = Column(String, nullable=False)

    # Informations √©valuateur (d√©normalis√©es pour historique)
    nom_evaluateur = Column(String, nullable=False)
    prenom_evaluateur = Column(String, nullable=False)
    poste_evaluateur = Column(String, nullable=False)

    # M√©tadonn√©es
    # statut = Column(SQLEnum(StatutCertificat), default=StatutCertificat.GENERE)
    statut = Column(
        SQLEnum(
            StatutCertificat,
            name='statutcertificat',
            create_constraint=True,
            validate_strings=True
        ),
        default=StatutCertificat.GENERE
    )
    date_generation = Column(DateTime(timezone=True), server_default=func.now())
    date_dernier_telechargement = Column(DateTime(timezone=True), nullable=True)
    nombre_verifications = Column(Integer, default=0)

    # QR Code et PDF
    qr_code_data = Column(Text, nullable=True)  # Data du QR code
    chemin_pdf = Column(String, nullable=True)  # Chemin vers le PDF si stock√©

    # Cl√©s √©trang√®res
    evaluation_id = Column(Integer, ForeignKey("evaluation.id"), nullable=False, unique=True)
    candidature_id = Column(Integer, ForeignKey("candidature.id"), nullable=False, unique=True)
    stage_id = Column(Integer, ForeignKey("stage.id"), nullable=False)
    entreprise_id = Column(Integer, ForeignKey("entreprise.id"), nullable=False)
    generateur_id = Column(Integer, ForeignKey("utilisateur.id"), nullable=False)  # RH qui a g√©n√©r√©

    # Relations
    evaluation = relationship("Evaluation", back_populates="certificat")
    candidature = relationship("Candidature", back_populates="certificat")
    stage = relationship("Stage")
    entreprise = relationship("Entreprise")
    generateur = relationship("Utilisateur")  # RH ou Recruteur qui a g√©n√©r√© le certificat

    @classmethod
    def generer_code_unique(cls, annee: int = None) -> str:
        """G√©n√®re un code unique pour le certificat."""
        if annee is None:
            annee = datetime.now().year
        
        # Format: CERT-YYYY-XXXXXXXX (8 caract√®res al√©atoires)
        code_aleatoire = str(uuid.uuid4()).replace('-', '').upper()[:8]
        return f"CERT-{annee}-{code_aleatoire}"
    
    def calculer_mention(self) -> str:
        """Calcule la mention bas√©e sur la note finale."""
        if self.note_finale >= 9:
            return "Excellent"
        elif self.note_finale >= 8:
            return "Tr√®s Bien"
        elif self.note_finale >= 7:
            return "Bien"
        elif self.note_finale >= 6:
            return "Assez Bien"
        elif self.note_finale >= 5:
            return "Passable"
        else:
            return "Insuffisant"
        
    def incrementer_verifications(self):
        """Incr√©mente le compteur de v√©rifications."""
        self.nombre_verifications += 1