# app/api/endpoints/evaluations.py
from fastapi import APIRouter, Depends, HTTPException, status, Response
from sqlalchemy.orm import Session, joinedload
from typing import List, Optional
import tempfile
import os
from fastapi.responses import FileResponse, StreamingResponse
from io import BytesIO
from sqlalchemy.sql import func , or_ # ðŸ†• AJOUT pour func.now()

from app.api.deps import get_current_user, get_db, get_user_by_type
from app.models.utilisateur import Utilisateur
from app.models.evaluation import Evaluation, CritereEvaluation, Certificat , DetailEvaluation
from app.models.stage import Stage
from app.schemas.evaluation import (
    EvaluationCreate, EvaluationUpdate, Evaluation as EvaluationSchema,
    EvaluationValidation, CritereEvaluation as CritereEvaluationSchema,
    Certificat as CertificatSchema,  # ðŸ†• AJOUT pour response_model
    StatistiquesEvaluation,
        CertificatPublic,
          EvaluationWithRelations  # ðŸ†• AJOUT pour vÃ©rification publique


)
from app.services.evaluation_service import EvaluationService
from app.models.candidature import Candidature
from app.models.stagiaire import Stagiaire

# SchÃ©mas Pydantic
router = APIRouter()

# ============================================================================
# CRITÃˆRES D'Ã‰VALUATION
# ============================================================================

@router.get("/criteres", response_model=List[CritereEvaluationSchema])
def get_criteres_evaluation(
    db: Session = Depends(get_db),
    current_user: Utilisateur = Depends(get_current_user)
):
    """RÃ©cupÃ©rer les critÃ¨res d'Ã©valuation disponibles."""
    entreprise_id = None
    if hasattr(current_user, 'entreprise_id'):
        entreprise_id = current_user.entreprise_id
    
    criteres = EvaluationService.obtenir_criteres_evaluation(db, entreprise_id)
    return criteres

# ============================================================================
# Ã‰VALUATIONS
# ============================================================================

@router.post("/", response_model=EvaluationSchema)
def create_evaluation(
    *,
    db: Session = Depends(get_db),
    evaluation_in: EvaluationCreate,
    current_user: Utilisateur = Depends(get_current_user)
):
    """CrÃ©er une nouvelle Ã©valuation (RH ou Recruteur)."""
    
    # VÃ©rifier les permissions
    if current_user.type not in ["responsable_rh", "recruteur"]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Seuls les RH et recruteurs peuvent crÃ©er des Ã©valuations"
        )
    
    # VÃ©rifier que l'utilisateur peut Ã©valuer ce stage
    stage = db.query(Stage).filter(Stage.id == evaluation_in.stage_id).first()
    if not stage:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Stage non trouvÃ©"
        )
    
    # Permissions selon le type d'utilisateur
    if current_user.type == "recruteur" and stage.recruteur_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Vous ne pouvez Ã©valuer que vos propres stages"
        )
    elif current_user.type == "responsable_rh" and stage.entreprise_id != current_user.entreprise_id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Vous ne pouvez Ã©valuer que les stages de votre entreprise"
        )
    
    try:
        evaluation = EvaluationService.creer_evaluation(
            db, evaluation_in, current_user.id
        )
        return evaluation
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
    
@router.get("/")
def get_evaluations(
    db: Session = Depends(get_db),
    current_user: Utilisateur = Depends(get_current_user),
    skip: int = 0,
    limit: int = 100,
    statut: Optional[str] = None,
    search: Optional[str] = None  # ðŸ”§ AJOUTER LE PARAMÃˆTRE SEARCH

):
    """RÃ©cupÃ©rer les Ã©valuations selon le type d'utilisateur."""
    
    # query = db.query(Evaluation).join(Stage)

    # ðŸ”¥ QUERY AVEC JOINEDLOAD EXPLICITES
    query = db.query(Evaluation).options(
        # Charger l'Ã©valuateur
        joinedload(Evaluation.evaluateur),
        # Charger le stage avec ses relations
        joinedload(Evaluation.stage).joinedload(Stage.stagiaire),
        joinedload(Evaluation.stage).joinedload(Stage.entreprise),
        joinedload(Evaluation.stage).joinedload(Stage.candidature).joinedload(Candidature.offre),
        # Charger les dÃ©tails avec critÃ¨res
        joinedload(Evaluation.details).joinedload(DetailEvaluation.critere)
    )

    # Joindre Stage pour les filtres
    query = query.join(Stage)

    # Filtrer selon le type d'utilisateur
    if current_user.type == "responsable_rh":
        query = query.filter(Stage.entreprise_id == current_user.entreprise_id)
    elif current_user.type == "recruteur":
        query = query.filter(Stage.recruteur_id == current_user.id)
    elif current_user.type == "stagiaire":
        query = query.filter(Stage.stagiaire_id == current_user.id)
    else:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="AccÃ¨s non autorisÃ©"
        )
    # Filtre par statut si spÃ©cifiÃ©
    if statut:
        from app.models.evaluation import StatutEvaluation
        try:
            statut_enum = StatutEvaluation(statut)
            query = query.filter(Evaluation.statut == statut_enum)
        except ValueError:
            pass  # Ignorer les statuts invalides
    
    # ðŸ”§ FILTRE PAR RECHERCHE (nom/prÃ©nom du stagiaire) - CORRECTION
    if search:
        search_term = f"%{search.lower()}%"
        # Joindre avec la table Stagiaire pour la recherche
        query = query.join(Stage.stagiaire)
        query = query.filter(
            or_(  # ðŸ”§ CORRECTION : or_ au lieu de db.or_
                func.lower(Stagiaire.nom).like(search_term),
                func.lower(Stagiaire.prenom).like(search_term),
                func.lower(func.concat(Stagiaire.prenom, ' ', Stagiaire.nom)).like(search_term),
                func.lower(func.concat(Stagiaire.nom, ' ', Stagiaire.prenom)).like(search_term)
            )
        )
    # evaluations = query.offset(skip).limit(limit).all()
    # return evaluations
    # ðŸ”¥ AJOUTER L'ORDRE POUR AVOIR LES PLUS RÃ‰CENTES EN PREMIER
    evaluations = query.order_by(Evaluation.date_evaluation.desc()).offset(skip).limit(limit).all()

    # ðŸ”¥ DEBUG CÃ”TÃ‰ SERVEUR
    print(f"ðŸ“Š Nombre d'Ã©valuations trouvÃ©es: {len(evaluations)}")
    if evaluations:
        eval_test = evaluations[0]
        print(f"ðŸ“Š PremiÃ¨re Ã©valuation - ID: {eval_test.id}")
        print(f"ðŸ“Š Stage chargÃ©: {eval_test.stage is not None}")
        print(f"ðŸ“Š Evaluateur chargÃ©: {eval_test.evaluateur is not None}")
        if eval_test.stage:
            print(f"ðŸ“Š Stagiaire chargÃ©: {eval_test.stage.stagiaire is not None}")
            print(f"ðŸ“Š Candidature chargÃ©e: {eval_test.stage.candidature is not None}")
            
     # ðŸ”¥ CONSTRUCTION MANUELLE GARANTIE DE FONCTIONNER
    result = []
    for eval in evaluations:
        eval_dict = {
            "id": eval.id,
            "statut": eval.statut.value,
            "note_globale": eval.note_globale,
            "date_evaluation": eval.date_evaluation.isoformat(),
            "date_validation": eval.date_validation.isoformat() if eval.date_validation else None,
            "commentaire_general": eval.commentaire_general,
            "points_forts": eval.points_forts,
            "points_amelioration": eval.points_amelioration,
            "recommandations": eval.recommandations,
            "recommande_embauche": eval.recommande_embauche,
            "stage_id": eval.stage_id,
            "evaluateur_id": eval.evaluateur_id,
            "created_at": eval.created_at.isoformat() if eval.created_at else None,
            "updated_at": eval.updated_at.isoformat() if eval.updated_at else None,
        }
        
        # ðŸ”¥ AJOUTER LES RELATIONS SI ELLES EXISTENT
        if eval.stage:
            eval_dict["stage"] = {
                "id": eval.stage.id,
                "description": eval.stage.description,
                "date_debut": eval.stage.date_debut.isoformat(),
                "date_fin": eval.stage.date_fin.isoformat(),
            }
            
            # Stagiaire
            if eval.stage.stagiaire:
                eval_dict["stage"]["stagiaire"] = {
                    "id": eval.stage.stagiaire.id,
                    "nom": eval.stage.stagiaire.nom,
                    "prenom": eval.stage.stagiaire.prenom
                }
            
            # Candidature et offre
            if eval.stage.candidature:
                eval_dict["stage"]["candidature"] = {
                    "id": eval.stage.candidature.id
                }
                if eval.stage.candidature.offre:
                    eval_dict["stage"]["candidature"]["offre"] = {
                        "id": eval.stage.candidature.offre.id,
                        "titre": eval.stage.candidature.offre.titre
                    }
        
        # Evaluateur
        if eval.evaluateur:
            eval_dict["evaluateur"] = {
                "id": eval.evaluateur.id,
                "nom": eval.evaluateur.nom,
                "prenom": eval.evaluateur.prenom,
                "type": eval.evaluateur.type
            }
        
        result.append(eval_dict)
    
    print(f"ðŸ“Š Retour de {len(result)} Ã©valuations avec relations")
    if result:
        print(f"ðŸ“Š PremiÃ¨re Ã©valuation stage: {result[0].get('stage', {}).get('stagiaire', 'Non trouvÃ©')}")
    
    return result
    # return evaluations

# @router.get("/{evaluation_id}", response_model=EvaluationSchema)
# def get_evaluation(
#     evaluation_id: int,
#     db: Session = Depends(get_db),
#     current_user: Utilisateur = Depends(get_current_user)
# ):
#     """RÃ©cupÃ©rer une Ã©valuation spÃ©cifique."""

#     evaluation = db.query(Evaluation).filter(Evaluation.id == evaluation_id).first()
#     if not evaluation:
#         raise HTTPException(
#             status_code=status.HTTP_404_NOT_FOUND,
#             detail="Ã‰valuation non trouvÃ©e"
#         )
    
#     # VÃ©rifier les permissions
#     stage = evaluation.stage
#     if (current_user.type == "responsable_rh" and stage.entreprise_id != current_user.entreprise_id) or \
#        (current_user.type == "recruteur" and stage.recruteur_id != current_user.id) or \
#        (current_user.type == "stagiaire" and stage.stagiaire_id != current_user.id):
#         raise HTTPException(
#             status_code=status.HTTP_403_FORBIDDEN,
#             detail="AccÃ¨s non autorisÃ© Ã  cette Ã©valuation"
#         )
    
#     return evaluation
@router.get("/{evaluation_id}")
def get_evaluation(
    evaluation_id: int,
    db: Session = Depends(get_db),
    current_user: Utilisateur = Depends(get_current_user)
):
    """RÃ©cupÃ©rer une Ã©valuation spÃ©cifique avec toutes les relations."""
    
    # ðŸ”§ Charger l'Ã©valuation avec toutes les relations nÃ©cessaires
    evaluation = db.query(Evaluation)\
        .options(
            # Charger l'Ã©valuateur
            joinedload(Evaluation.evaluateur),
            # Charger le stage avec ses relations
            joinedload(Evaluation.stage).joinedload(Stage.stagiaire),
            joinedload(Evaluation.stage).joinedload(Stage.entreprise),
            joinedload(Evaluation.stage).joinedload(Stage.candidature).joinedload(Candidature.offre),
            # Charger les dÃ©tails avec critÃ¨res
            joinedload(Evaluation.details).joinedload(DetailEvaluation.critere)
        )\
        .filter(Evaluation.id == evaluation_id)\
        .first()
    
    if not evaluation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Ã‰valuation non trouvÃ©e"
        )
    
    # VÃ©rifier les permissions
    stage = evaluation.stage
    if (current_user.type == "responsable_rh" and stage.entreprise_id != current_user.entreprise_id) or \
       (current_user.type == "recruteur" and stage.recruteur_id != current_user.id) or \
       (current_user.type == "stagiaire" and stage.stagiaire_id != current_user.id):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="AccÃ¨s non autorisÃ© Ã  cette Ã©valuation"
        )
    
    # ðŸ”§ Debug pour voir les relations chargÃ©es
    print(f"ðŸ“Š Ã‰valuation {evaluation.id} - Relations chargÃ©es:")
    print(f"  - Stage: {evaluation.stage is not None}")
    if evaluation.stage:
        print(f"  - Stagiaire: {evaluation.stage.stagiaire is not None}")
        print(f"  - Entreprise: {evaluation.stage.entreprise is not None}")
        print(f"  - Candidature: {evaluation.stage.candidature is not None}")
        if evaluation.stage.candidature:
            print(f"  - Offre: {evaluation.stage.candidature.offre is not None}")
    print(f"  - Evaluateur: {evaluation.evaluateur is not None}")
    print(f"  - DÃ©tails: {len(evaluation.details) if evaluation.details else 0}")
    
    # ðŸ”§ Construire la rÃ©ponse manuelle comme pour la liste
    eval_dict = {
        "id": evaluation.id,
        "statut": evaluation.statut.value,
        "note_globale": evaluation.note_globale,
        "date_evaluation": evaluation.date_evaluation.isoformat(),
        "date_validation": evaluation.date_validation.isoformat() if evaluation.date_validation else None,
        "commentaire_general": evaluation.commentaire_general,
        "points_forts": evaluation.points_forts,
        "points_amelioration": evaluation.points_amelioration,
        "recommandations": evaluation.recommandations,
        "recommande_embauche": evaluation.recommande_embauche,
        "stage_id": evaluation.stage_id,
        "evaluateur_id": evaluation.evaluateur_id,
        "created_at": evaluation.created_at.isoformat() if evaluation.created_at else None,
        "updated_at": evaluation.updated_at.isoformat() if evaluation.updated_at else None,
    }
    
    # ðŸ”§ Ajouter les relations Stage
    if evaluation.stage:
        eval_dict["stage"] = {
            "id": evaluation.stage.id,
            "description": evaluation.stage.description,
            "date_debut": evaluation.stage.date_debut.isoformat(),
            "date_fin": evaluation.stage.date_fin.isoformat(),
            "status": evaluation.stage.status,
            "objectifs": evaluation.stage.objectifs,
            # ðŸŽ¯ Titre calculÃ© pour le frontend
            "titre": None  # On va le calculer aprÃ¨s
        }
        
        # Stagiaire
        if evaluation.stage.stagiaire:
            eval_dict["stage"]["stagiaire"] = {
                "id": evaluation.stage.stagiaire.id,
                "nom": evaluation.stage.stagiaire.nom,
                "prenom": evaluation.stage.stagiaire.prenom,
                "email": evaluation.stage.stagiaire.email
            }
        
        # Entreprise
        if evaluation.stage.entreprise:
            eval_dict["stage"]["entreprise"] = {
                "id": evaluation.stage.entreprise.id,
                "raison_social": evaluation.stage.entreprise.raison_social,
                "nom": evaluation.stage.entreprise.raison_social  # Alias pour compatibilitÃ©
            }
        
        # Candidature et offre
        if evaluation.stage.candidature:
            eval_dict["stage"]["candidature"] = {
                "id": evaluation.stage.candidature.id
            }
            if evaluation.stage.candidature.offre:
                eval_dict["stage"]["candidature"]["offre"] = {
                    "id": evaluation.stage.candidature.offre.id,
                    "titre": evaluation.stage.candidature.offre.titre,
                    "description": evaluation.stage.candidature.offre.description
                }
                # ðŸŽ¯ Utiliser le titre de l'offre comme titre du stage
                eval_dict["stage"]["titre"] = evaluation.stage.candidature.offre.titre
            
        # ðŸŽ¯ Si pas de titre d'offre, utiliser la description du stage
        if not eval_dict["stage"]["titre"]:
            eval_dict["stage"]["titre"] = evaluation.stage.description or "Stage"
    
    # ðŸ”§ Ajouter l'Ã©valuateur
    if evaluation.evaluateur:
        eval_dict["evaluateur"] = {
            "id": evaluation.evaluateur.id,
            "nom": evaluation.evaluateur.nom,
            "prenom": evaluation.evaluateur.prenom,
            "email": evaluation.evaluateur.email,
            "type": evaluation.evaluateur.type
        }
    
    # ðŸ”§ Ajouter les dÃ©tails d'Ã©valuation
    if evaluation.details:
        eval_dict["details"] = []
        for detail in evaluation.details:
            detail_dict = {
                "id": detail.id,
                "note": detail.note,
                "commentaire": detail.commentaire,
                "evaluation_id": detail.evaluation_id,
                "critere_id": detail.critere_id
            }
            
            # Ajouter le critÃ¨re
            if detail.critere:
                detail_dict["critere"] = {
                    "id": detail.critere.id,
                    "nom": detail.critere.nom,
                    "description": detail.critere.description,
                    "type_critere": detail.critere.type_critere.value if detail.critere.type_critere else None,
                    "poids": detail.critere.poids,
                    "actif": detail.critere.actif
                }
            
            eval_dict["details"].append(detail_dict)
    
    print(f"ðŸ“Š Retour Ã©valuation {evaluation.id} avec toutes les relations")
    if eval_dict.get("stage", {}).get("stagiaire"):
        print(f"ðŸ“Š Stagiaire: {eval_dict['stage']['stagiaire']['prenom']} {eval_dict['stage']['stagiaire']['nom']}")
    if eval_dict.get("stage", {}).get("titre"):
        print(f"ðŸ“Š Titre: {eval_dict['stage']['titre']}")
    if eval_dict.get("evaluateur"):
        print(f"ðŸ“Š Ã‰valuateur: {eval_dict['evaluateur']['prenom']} {eval_dict['evaluateur']['nom']}")
    
    return eval_dict

@router.put("/{evaluation_id}", response_model=EvaluationSchema)
def update_evaluation(
    *,
    db: Session = Depends(get_db),
    evaluation_id: int,
    evaluation_update: EvaluationUpdate,
    current_user: Utilisateur = Depends(get_current_user)
):
    """Mettre Ã  jour une Ã©valuation (si pas encore validÃ©e)."""

    evaluation = db.query(Evaluation).filter(Evaluation.id == evaluation_id).first()
    if not evaluation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Ã‰valuation non trouvÃ©e"
        )
    
    # VÃ©rifier que c'est l'Ã©valuateur
    if evaluation.evaluateur_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Vous ne pouvez modifier que vos propres Ã©valuations"
        )
    
    # VÃ©rifier que l'Ã©valuation n'est pas validÃ©e
    from app.models.evaluation import StatutEvaluation
    if evaluation.statut == StatutEvaluation.VALIDEE:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Impossible de modifier une Ã©valuation validÃ©e"
        )
    
    # Mettre Ã  jour les champs
    update_data = evaluation_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        if field != "details":  # GÃ©rer les dÃ©tails sÃ©parÃ©ment
            setattr(evaluation, field, value)

    # Recalculer la note globale si nÃ©cessaire
    if hasattr(evaluation_update, 'details') and evaluation_update.details:
        # Supprimer les anciens dÃ©tails
        from app.models.evaluation import DetailEvaluation
        db.query(DetailEvaluation).filter(
            DetailEvaluation.evaluation_id == evaluation.id
        ).delete()
        
        # Ajouter les nouveaux dÃ©tails
        for detail_data in evaluation_update.details:
            detail = DetailEvaluation(
                **detail_data.dict(),
                evaluation_id=evaluation.id
            )
            db.add(detail)
        
        evaluation.calculer_note_globale()

    db.commit()
    db.refresh(evaluation)
    return evaluation



# ""jdgggbhnddddddddddddddddddddddddddddddddddddd#################################

@router.post("/{evaluation_id}/terminer", response_model=EvaluationSchema)
def terminer_evaluation(
    *,
    db: Session = Depends(get_db),
    evaluation_id: int,
    current_user: Utilisateur = Depends(get_current_user)
):
    """Terminer une Ã©valuation (marquer comme terminÃ©e)."""
    
    evaluation = db.query(Evaluation).filter(Evaluation.id == evaluation_id).first()
    if not evaluation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Ã‰valuation non trouvÃ©e"
        )
    
    # VÃ©rifier que c'est l'Ã©valuateur
    if evaluation.evaluateur_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Vous ne pouvez terminer que vos propres Ã©valuations"
        )
    
    # VÃ©rifier que l'Ã©valuation est en brouillon
    from app.models.evaluation import StatutEvaluation
    if evaluation.statut != StatutEvaluation.BROUILLON:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Seules les Ã©valuations en brouillon peuvent Ãªtre terminÃ©es"
        )
    
    # VÃ©rifier qu'il y a des dÃ©tails
    if not evaluation.details:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="L'Ã©valuation doit contenir au moins un critÃ¨re Ã©valuÃ©"
        )
    
    # Terminer l'Ã©valuation
    evaluation.statut = StatutEvaluation.TERMINEE
    db.commit()
    db.refresh(evaluation)
    return evaluation


# ""jdgggbhnddddddddddddddddddddddddddddddddddddd#################################

@router.post("/{evaluation_id}/valider", response_model=EvaluationSchema)
def valider_evaluation(
    *,
    db: Session = Depends(get_db),
    evaluation_id: int,
    validation: EvaluationValidation,
    current_user: Utilisateur = Depends(get_current_user)
):
    """Valider une Ã©valuation (RH seulement)."""
    
    if current_user.type != "responsable_rh":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Seuls les responsables RH peuvent valider les Ã©valuations"
        )
    
    try:
        evaluation = EvaluationService.valider_evaluation(db, evaluation_id)
        return evaluation
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
    
# @router.get("/statistiques/entreprise", response_model=StatistiquesEvaluation)
# def get_statistiques_evaluations(
#     db: Session = Depends(get_db),
#     current_user: Utilisateur = Depends(get_user_by_type("responsable_rh"))
# ):
#     """Obtenir les statistiques d'Ã©valuation de l'entreprise."""
    
#     stats = EvaluationService.calculer_statistiques_evaluation(
#         db, current_user.entreprise_id
#     )
#     return stats

@router.get("/statistiques/entreprise", response_model=StatistiquesEvaluation)
def get_statistiques_evaluations(
    db: Session = Depends(get_db),
    current_user: Utilisateur = Depends(get_current_user)  # ðŸ”§ CHANGEMENT ICI
):
    """Obtenir les statistiques d'Ã©valuation selon le rÃ´le utilisateur."""
    
    # ðŸ”§ VÃ©rifier les permissions
    if current_user.type not in ["responsable_rh", "recruteur"]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="AccÃ¨s non autorisÃ© aux statistiques"
        )
    
    # ðŸ”§ Adapter le calcul selon le rÃ´le
    if current_user.type == "responsable_rh":
        # RH voit les statistiques de toute l'entreprise
        stats = EvaluationService.calculer_statistiques_evaluation(
            db, current_user.entreprise_id
        )
    elif current_user.type == "recruteur":
        # Recruteur voit ses propres statistiques
        stats = EvaluationService.calculer_statistiques_recruteur(
            db, current_user.id
        )
    
    return stats

# ============================================================================
# CERTIFICATS
# ============================================================================

# @router.post("/certificats/generer")
# def generer_certificat(
#     *,
#     db: Session = Depends(get_db),
#     evaluation_id: int,
#     current_user: Utilisateur = Depends(get_user_by_type("responsable_rh"))
# ):
#     """GÃ©nÃ©rer un certificat Ã  partir d'une Ã©valuation validÃ©e."""

#     try:
#         from app.services.evaluation_service import CertificatService
#         certificat = CertificatService.generer_certificat(
#             db, evaluation_id, current_user.id
#         )
#         return {
#             "message": "Certificat gÃ©nÃ©rÃ© avec succÃ¨s",
#             "certificat_id": certificat.id,
#             "code_unique": certificat.code_unique
#         }
#     except ValueError as e:
#         raise HTTPException(
#             status_code=status.HTTP_400_BAD_REQUEST,
#             detail=str(e)
#         )
    
@router.post("/certificats/generer")
def generer_certificat(
    *,
    db: Session = Depends(get_db),
    evaluation_id: int,
    current_user: Utilisateur = Depends(get_current_user)  # ðŸ”§ Changement ici
):
    """GÃ©nÃ©rer un certificat Ã  partir d'une Ã©valuation validÃ©e."""
    
    # ðŸ”§ VÃ©rifier les permissions manuellement
    if current_user.type not in ["responsable_rh", "recruteur"]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Seuls les RH et recruteurs peuvent gÃ©nÃ©rer des certificats"
        )
    
    # ðŸ”§ VÃ©rifier que le recruteur ne peut gÃ©nÃ©rer que pour ses Ã©valuations
    if current_user.type == "recruteur":
        evaluation_check = db.query(Evaluation)\
            .join(Stage)\
            .filter(
                Evaluation.id == evaluation_id,
                Stage.recruteur_id == current_user.id
            ).first()
        
        if not evaluation_check:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Vous ne pouvez gÃ©nÃ©rer des certificats que pour vos propres Ã©valuations"
            )
    
    # ðŸ”§ RH peut gÃ©nÃ©rer pour toutes les Ã©valuations de son entreprise
    elif current_user.type == "responsable_rh":
        evaluation_check = db.query(Evaluation)\
            .join(Stage)\
            .filter(
                Evaluation.id == evaluation_id,
                Stage.entreprise_id == current_user.entreprise_id
            ).first()
        
        if not evaluation_check:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Vous ne pouvez gÃ©nÃ©rer des certificats que pour les Ã©valuations de votre entreprise"
            )
    
    try:
        from app.services.evaluation_service import CertificatService
        
        # ðŸ”§ Utiliser le service corrigÃ© qui retourne un dictionnaire
        result = CertificatService.generer_certificat(
            db, evaluation_id, current_user.id
        )
        
        # ðŸ”§ Adapter la rÃ©ponse selon le cas
        if result["deja_genere"]:
            return {
                "success": True,
                "message": result["message"],
                "certificat_id": result["certificat"].id if result["certificat"] else None,
                "code_unique": result["code_unique"],
                "deja_existant": True
            }
        else:
            return {
                "success": True,
                "message": result["message"],
                "certificat_id": result["certificat"].id,
                "code_unique": result["code_unique"],
                "deja_existant": False
            }
            
    except ValueError as e:
        print(f"ðŸ”§ ValueError dans endpoint: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
    except Exception as e:
        print(f"ðŸ”§ Erreur gÃ©nÃ©rale dans endpoint: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur interne lors de la gÃ©nÃ©ration du certificat"
        )
    

@router.get("/certificats/{certificat_id}/pdf")
def telecharger_certificat_pdf(
    certificat_id: int,
    db: Session = Depends(get_db),
    current_user: Utilisateur = Depends(get_current_user)
):
    """TÃ©lÃ©charger le PDF d'un certificat."""
    
    certificat = db.query(Certificat).filter(Certificat.id == certificat_id).first()
    if not certificat:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Certificat non trouvÃ©"
        )

    #VÃ©rifier les permissions
    stage = certificat.stage
    if (current_user.type == "responsable_rh" and stage.entreprise_id != current_user.entreprise_id) or \
       (current_user.type == "recruteur" and stage.recruteur_id != current_user.id) or \
       (current_user.type == "stagiaire" and stage.stagiaire_id != current_user.id):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="AccÃ¨s non autorisÃ© Ã  ce certificat"
        )
    
    # GÃ©nÃ©rer le PDF Ã  la demande
    try:
        from app.services.pdf_service import PDFService
        pdf_buffer = PDFService.generer_certificat_pdf(certificat)

         # Marquer comme tÃ©lÃ©chargÃ©
        from app.services.evaluation_service import CertificatService
        CertificatService.marquer_comme_telecharge(db, certificat_id)

        # Retourner le PDF
        filename = f"certificat_{certificat.code_unique}.pdf"

        return StreamingResponse(
            BytesIO(pdf_buffer),
            media_type="application/pdf",
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur lors de la gÃ©nÃ©ration du PDF: {str(e)}"
        )
    
# ============================================================================
# VÃ‰RIFICATION PUBLIQUE (SANS AUTHENTIFICATION)
# ============================================================================

@router.get("/certificats/verify/{code_unique}")
def verifier_certificat_public(code_unique: str, db: Session = Depends(get_db)):
    """VÃ©rification publique d'un certificat via QR code (accÃ¨s guest)."""

    try:
        from app.services.evaluation_service import VerificationService
        from app.schemas.evaluation import CertificatPublic
        
        resultat = VerificationService.verifier_par_qr_code(db, code_unique)
        
        if not resultat["valide"]:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=resultat["message"]
            )
        
        # Convertir en schÃ©ma public (sans donnÃ©es sensibles)
        certificat = resultat["certificat"]
        certificat_public = CertificatPublic(
            code_unique=certificat.code_unique,
            titre_stage=certificat.titre_stage,
            date_debut_stage=certificat.date_debut_stage,
            date_fin_stage=certificat.date_fin_stage,
            duree_stage_jours=certificat.duree_stage_jours,
            note_finale=certificat.note_finale,
            mention=certificat.mention,
            nom_stagiaire=certificat.nom_stagiaire,
            prenom_stagiaire=certificat.prenom_stagiaire,
            nom_entreprise=certificat.nom_entreprise,
            secteur_entreprise=certificat.secteur_entreprise,
            date_generation=certificat.date_generation,
            est_valide=True
        )

        return {
            "valide": True,
            "message": resultat["message"],
            "certificat": certificat_public,
            "verification_numero": resultat["verification_numero"]
        }

    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur lors de la vÃ©rification: {str(e)}"
        )


@router.get("/certificats/{certificat_id}/qr-code")
def get_qr_code(
    certificat_id: int,
    db: Session = Depends(get_db),
    current_user: Utilisateur = Depends(get_current_user)
):
    """RÃ©cupÃ©rer le QR code d'un certificat."""

    certificat = db.query(Certificat).filter(Certificat.id == certificat_id).first()
    if not certificat:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Certificat non trouvÃ©"
        )
    
    # VÃ©rifier les permissions (mÃªme logique que pour le PDF)
    stage = certificat.stage
    if (current_user.type == "responsable_rh" and stage.entreprise_id != current_user.entreprise_id) or \
       (current_user.type == "recruteur" and stage.recruteur_id != current_user.id) or \
       (current_user.type == "stagiaire" and stage.stagiaire_id != current_user.id):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="AccÃ¨s non autorisÃ© Ã  ce certificat"
        )
    
    return {
        "code_unique": certificat.code_unique,
        "qr_code_data": certificat.qr_code_data,
        "verification_url": f"/api/evaluations/certificats/verify/{certificat.code_unique}"
    }



# ============================================================================
# ENDPOINTS MANQUANTS POUR LES CERTIFICATS
# ============================================================================

@router.get("/certificats/", response_model=List[CertificatSchema])
def get_certificates(
    db: Session = Depends(get_db),
    current_user: Utilisateur = Depends(get_current_user),
    skip: int = 0,
    limit: int = 100,
    search: Optional[str] = None,
    mention: Optional[str] = None,
    annee: Optional[int] = None
):
    """RÃ©cupÃ©rer la liste des certificats avec filtres."""
    
    query = db.query(Certificat).join(Stage)
    
    # Filtrer selon le type d'utilisateur
    if current_user.type == "responsable_rh":
        query = query.filter(Stage.entreprise_id == current_user.entreprise_id)
    elif current_user.type == "recruteur":
        query = query.filter(Stage.recruteur_id == current_user.id)
    elif current_user.type == "stagiaire":
        query = query.filter(Stage.stagiaire_id == current_user.id)
    else:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="AccÃ¨s non autorisÃ©"
        )
    
    # Filtres de recherche
    if search:
        query = query.filter(
            (Certificat.nom_stagiaire.ilike(f"%{search}%")) |
            (Certificat.prenom_stagiaire.ilike(f"%{search}%")) |
            (Certificat.code_unique.ilike(f"%{search}%"))
        )
    
    if mention:
        query = query.filter(Certificat.mention == mention)
    
    if annee:
        from sqlalchemy import extract
        query = query.filter(extract('year', Certificat.date_generation) == annee)
    
    # Trier par date de gÃ©nÃ©ration (plus rÃ©cents en premier)
    query = query.order_by(Certificat.date_generation.desc())
    
    certificates = query.offset(skip).limit(limit).all()
    return certificates

@router.get("/certificats/by-evaluation/{evaluation_id}", response_model=CertificatSchema)
def get_certificate_by_evaluation(
    evaluation_id: int,
    db: Session = Depends(get_db),
    current_user: Utilisateur = Depends(get_current_user)
):
    """RÃ©cupÃ©rer le certificat d'une Ã©valuation spÃ©cifique."""
    
    # VÃ©rifier que l'Ã©valuation existe
    evaluation = db.query(Evaluation).filter(Evaluation.id == evaluation_id).first()
    if not evaluation:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Ã‰valuation non trouvÃ©e"
        )
    
    # VÃ©rifier les permissions sur l'Ã©valuation
    stage = evaluation.stage
    if (current_user.type == "responsable_rh" and stage.entreprise_id != current_user.entreprise_id) or \
       (current_user.type == "recruteur" and stage.recruteur_id != current_user.id) or \
       (current_user.type == "stagiaire" and stage.stagiaire_id != current_user.id):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="AccÃ¨s non autorisÃ© Ã  cette Ã©valuation"
        )
    
    # RÃ©cupÃ©rer le certificat
    certificat = db.query(Certificat).filter(
        Certificat.evaluation_id == evaluation_id
    ).first()
    
    if not certificat:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Aucun certificat trouvÃ© pour cette Ã©valuation"
        )
    
    return certificat